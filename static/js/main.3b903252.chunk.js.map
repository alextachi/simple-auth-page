{"version":3,"sources":["components/Input/index.jsx","components/Button/index.jsx","components/MemePopup/index.js","assets/images/reddit_icon.png","assets/images/loading_anim.svg","utils/validateField.js","redux/actions/users.js","pages/Auth/index.jsx","App.js","redux/reducers/users.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Auth","inputType","inputName","labelText","errorMessage","onInputHandler","className","classNames","type","name","onKeyUp","event","Button","disabled","primary","submit","icon","children","title","onClick","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","maxHeight","MemePopup","trigger","onClose","imageURL","isOpen","contentLabel","style","e","src","alt","validateField","fieldName","value","formErrors","toLowerCase","match","email","valid","message","length","password","setUser","user","payload","setIsAuth","auth","setUserLoaded","isLoaded","dispatch","useDispatch","userData","useSelector","data","isAuth","useState","emailValid","setEmailValid","emailErrorMessage","setEmailErrorMessage","setEmail","passwordValid","setPasswordValid","passwordErrorMessage","setPasswordErrorMessage","setPassword","formValid","setFormValid","randomMemeUrl","setRandomMemeUrl","memeLoaded","setMemeLoaded","isMemeLoading","setIsMemeLoading","validateForm","useEffect","alert","full_name","height","weight","debut","console","log","onSubmit","preventDefault","axios","get","then","trim","catch","err","authUser","Input","validationResult","target","loadingGif","RedditSimple","RandomPost","res","url","finally","redditIcon","App","INITIAL_STATE","userLoaded","usersReducer","state","action","produce","draft","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b903252.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames';\r\nimport './input.scss';\r\n\r\n\r\n\r\nconst Auth = ({ inputType, inputName, labelText, errorMessage, onInputHandler }) => {\r\n    return (\r\n        <div className={classNames('input__field', {\r\n            'input__field--error': errorMessage !== null\r\n        })}>\r\n            <label className=\"input__label\">\r\n                <span className=\"input__label-text\">{labelText}</span>\r\n                <input className=\"input\" type={inputType} name={inputName} onKeyUp={(event) => { onInputHandler(event) }} />\r\n            </label>\r\n            {errorMessage &&\r\n                <div className=\"input__error-message\">{errorMessage}</div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React from 'react'\r\nimport classNames from 'classnames';\r\n\r\nimport './button.scss';\r\n\r\n\r\n\r\nconst Button = ({ disabled, primary, submit, icon, children, title, onClick }) => {\r\n    return (\r\n        <button\r\n            className={classNames('button', {\r\n                'button--disabled': disabled,\r\n                'button--primary': primary,\r\n                'button--with-icon': icon\r\n            })}\r\n            disabled={disabled}\r\n            type={submit ? \"submit\" : null}\r\n            title={title}\r\n            onClick={onClick}\r\n        >\r\n\r\n            {children}\r\n\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react'\r\nimport Modal from 'react-modal';\r\nimport './meme.scss';\r\n\r\nModal.setAppElement('#root');\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        maxHeight: '80%',\r\n    },\r\n};\r\n\r\nconst MemePopup = ({ trigger, onClose, imageURL}) => {\r\n\r\n    const handleClose = (e) => {\r\n        onClose();\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={trigger}\r\n            contentLabel=\"Meme modal\"\r\n            style={customStyles}\r\n        >\r\n            <h2>Hello, I'm random meme</h2>\r\n            <button onClick={handleClose}>Close</button>\r\n            <br/>\r\n            \r\n            <br/>\r\n            <img src={imageURL} alt=\"Random meme\"/>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default MemePopup;","export default __webpack_public_path__ + \"static/media/reddit_icon.93d74d4f.png\";","export default __webpack_public_path__ + \"static/media/loading_anim.3314775c.svg\";","const validateField = (fieldName, value) => {\r\n    let formErrors = {};\r\n\r\n    switch (fieldName) {\r\n        case 'email':\r\n            if (!value.toLowerCase().match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\r\n                formErrors.email = { valid: false, message: 'Please enter a valid email address' };\r\n            } else {\r\n                formErrors.email = { valid: true, message: null };\r\n            }\r\n            break;\r\n\r\n        case 'password':\r\n            if (value.length < 6) {\r\n                formErrors.password = { valid: false, message: 'Password is too short' };\r\n            } else {\r\n                formErrors.password = { valid: true, message: null };\r\n            }\r\n            break;\r\n\r\n        default:\r\n            formErrors.email = { valid: false, message: 'Please enter a valid email address' };\r\n            formErrors.password = { valid: false, message: 'Password is too short' };\r\n            break;\r\n    }\r\n\r\n    return formErrors;\r\n}\r\n\r\nexport default validateField;","import axios from 'axios';\r\n\r\nexport const setUser = (user) => ({\r\n    type: 'USER:AUTH',\r\n    payload: user\r\n});\r\n\r\nexport const setIsAuth = (auth) => ({\r\n    type: 'USER:SET_AUTH',\r\n    payload: auth\r\n});\r\n\r\nexport const setUserLoaded = (isLoaded) => ({\r\n    type: 'USER:SET_USER_LOADED',\r\n    payload: isLoaded\r\n});\r\n\r\nexport const authUser = (email, password) => (dispatch) => {\r\n    setUserLoaded(false);\r\n    axios.get('https://cdn.webdepo.tech/db.json')\r\n        .then(({ data }) => {\r\n            const userData = data.user;\r\n            /**\r\n             * Incorrect validation of user information without backend\r\n             * Query goes to simple JSON file {user {}}\r\n             */\r\n            if (email.toLowerCase().trim() === userData.email && userData.password === password) {\r\n                console.log(\"Authorized\");\r\n                dispatch(setUser(userData));\r\n                dispatch(setIsAuth(true));\r\n                dispatch(setUserLoaded(true));\r\n            } else {\r\n                console.log(\"NOT OK\");\r\n                dispatch(setUser(null));\r\n                dispatch(setIsAuth(false));\r\n                dispatch(setUserLoaded(true));\r\n                alert(\"Wrong password or email!\");\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            dispatch(setUser(null));\r\n            dispatch(setIsAuth(false));\r\n            dispatch(setUserLoaded(true));\r\n        });\r\n};","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RedditSimple } from 'reddit-simple'\r\n\r\n//Components\r\nimport { Input, Button, MemePopup } from '../../components';\r\n\r\n//Styles\r\nimport './auth.scss';\r\n\r\n//Images\r\nimport redditIcon from '../../assets/images/reddit_icon.png';\r\nimport loadingGif from '../../assets/images/loading_anim.svg';\r\n\r\n//Utils\r\nimport { validateField } from '../../utils/';\r\n\r\n//redux\r\nimport { authUser} from '../../redux/actions/users';\r\n\r\nconst Auth = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const userData = useSelector(({ user }) => user.data);\r\n    const isAuth = useSelector(({ user }) => user.isAuth);\r\n\r\n    const [emailValid, setEmailValid] = useState(false);\r\n    const [emailErrorMessage, setEmailErrorMessage] = useState(null);\r\n    const [email, setEmail] = useState(null);\r\n\r\n    const [passwordValid, setPasswordValid] = useState(false);\r\n    const [passwordErrorMessage, setPasswordErrorMessage] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    const [randomMemeUrl, setRandomMemeUrl] = useState(null);\r\n    const [memeLoaded, setMemeLoaded] = useState(false);\r\n    const [isMemeLoading, setIsMemeLoading] = useState(false);\r\n\r\n    const validateForm = () => {\r\n        setFormValid(emailValid && passwordValid);\r\n    }\r\n\r\n    /**\r\n     * Validating email\r\n     */\r\n    useEffect(() => {\r\n        validateForm();\r\n        // eslint-disable-next-line\r\n    }, [emailValid]);\r\n\r\n\r\n    /**\r\n     * Validating password\r\n     */\r\n    useEffect(() => {\r\n        validateForm();\r\n        // eslint-disable-next-line\r\n    }, [passwordValid]);\r\n\r\n    /**\r\n     * Catch data from actions\r\n     */\r\n    useEffect(() => {\r\n        if (isAuth && userData) {\r\n            alert(`Authorized\\nYour name: ${userData.full_name}\\nYour height: ${userData.height}\\nYour weight: ${userData.weight}\\nYour debut: ${userData.debut}`);\r\n        }\r\n    }, [userData, isAuth]);\r\n\r\n\r\n    /**\r\n     * Catch meme \r\n     */\r\n    useEffect(() => {\r\n        console.log(memeLoaded);\r\n\r\n    }, [memeLoaded]);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(authUser(email, password));\r\n    };\r\n\r\n\r\n    const loadRandomMeme = (e) => {\r\n        setIsMemeLoading(true);\r\n        RedditSimple.RandomPost('programmerHumor').then(res => {\r\n            if (res[0]?.data.url) {\r\n                setRandomMemeUrl(res[0]?.data.url);\r\n                setMemeLoaded(true);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            alert(\"Error while loading meme\");\r\n        })\r\n            .finally(() => {\r\n                setIsMemeLoading(false);\r\n            })\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setMemeLoaded(false);\r\n        setRandomMemeUrl(null);\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"auth\">\r\n            <MemePopup trigger={memeLoaded} imageURL={randomMemeUrl} onClose={handleCloseModal} />\r\n            <div className=\"auth__bg\"></div>\r\n            <div className=\"auth__wrapper\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col col-2 col-xl-1 offset-xl-1\">\r\n                            <div className=\"auth__form-wrap\">\r\n                                <div className=\"auth__header\">\r\n                                    <h1 className=\"auth__title\">Authorization form</h1>\r\n                                    <p className=\"auth__subtitle\">Login: jonn@earth.com | password: thisisNotPassword</p>\r\n                                </div>\r\n                                <form className=\"auth__form\" onSubmit={handleSubmit}>\r\n                                    <Input\r\n                                        inputName=\"email\"\r\n                                        inputType=\"email\"\r\n                                        labelText=\"Your e-mail:\"\r\n                                        errorMessage={emailErrorMessage}\r\n                                        onInputHandler={(event) => {\r\n                                            const validationResult = validateField('email', event.target.value);\r\n                                            setEmailErrorMessage(validationResult.email.message);\r\n                                            setEmailValid(validationResult.email.valid);\r\n                                            setEmail(event.target.value);\r\n                                        }} />\r\n\r\n                                    <Input\r\n                                        inputName=\"password\"\r\n                                        inputType=\"password\"\r\n                                        labelText=\"Your password:\"\r\n                                        errorMessage={passwordErrorMessage}\r\n                                        onInputHandler={(event) => {\r\n                                            const validationResult = validateField('password', event.target.value);\r\n                                            setPasswordValid(validationResult.password.valid);\r\n                                            setPasswordErrorMessage(validationResult.password.message);\r\n                                            setPassword(event.target.value)\r\n                                        }} />\r\n                                    <br />\r\n                                    <div className=\"input__field\">\r\n                                        <Button disabled={!formValid} submit>Log in</Button>\r\n                                    </div>\r\n\r\n                                    <div className=\"input__field\">\r\n                                        <div className=\"input__split-wrapper\">\r\n                                            <div className=\"input__split-text\">or look at some Reddit meme</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                                <br />\r\n                                <div className=\"auth-buttons\">\r\n                                    {isMemeLoading ?\r\n                                        <img src={loadingGif} className=\"loading-image\" alt=\"Loading\"/>\r\n                                        :\r\n                                        <Button primary icon title=\"Find random reddit meme\" onClick={loadRandomMeme}>\r\n                                            <img src={redditIcon} alt=\"Reddit icon\" />\r\n                                        </Button>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React from 'react'\n\nimport { AuthPage } from './pages';\n\nfunction App() {\n  return (\n    <div className=\"page-wrapper\">\n        <AuthPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import produce from \"immer\"\r\n\r\n// Reducer with initial state\r\nconst INITIAL_STATE = {\r\n    data: null,\r\n    isAuth: false,\r\n    userLoaded: false\r\n}\r\n\r\n\r\nconst usersReducer = (state = INITIAL_STATE, action) =>\r\n    produce(state, draft => {\r\n        switch (action.type) {\r\n            case 'USER:AUTH':\r\n                draft.data = action.payload;\r\n                break;\r\n\r\n            case 'USER:SET_AUTH':\r\n                draft.isAuth = action.payload;\r\n                break;\r\n            case 'USER:SET_USER_LOADED':\r\n                draft.userLoaded = action.payload;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\nexport default usersReducer;","import {combineReducers} from 'redux';\r\n\r\nimport user from './users';\r\nconst rootReducer = combineReducers({\r\n    user\r\n});\r\n\r\nexport default rootReducer;","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk),\r\n    )\r\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\n\n//Styles\nimport './assets/style/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}